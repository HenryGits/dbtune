user root;
worker_processes 8;
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
#worker_rlimit_nofile配置要和系统的单进程打开文件数一致。我现在在linux 2.6内核下开启文件打开数为65535
worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections 65535;
    # 告诉nginx收到一个新连接通知后接受尽可能多的连接，默认是on
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    fastcgi_intercept_errors on;
    fastcgi_connect_timeout 600;
    fastcgi_send_timeout 600;
    fastcgi_read_timeout 600;

    # 2020-04-15更改 start
    # 如果header name中包含下划线，则忽略掉，放行。
    underscores_in_headers on;
    # 对于来自 FastCGI Server 的 Response，Nginx 将其缓冲到内存中，然后依次发送到客户端浏览器。缓冲区的大小由 fastcgi_buffers 和 fastcgi_buffer_size 两个值控制。
    fastcgi_buffer_size 64k;
    fastcgi_buffers 8 64k;
    # 2020-04-15更改 end

    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    fastcgi_temp_path /home/nginx/tmp/nginx_tmp;

    charset utf-8;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 32k;
    # 设置客户端最大的请求主体大小为8M
    client_max_body_size 10m;
    #开启高效文件传输模式
    sendfile on;
    #减少网络报文段数量
    tcp_nopush on;
    #提高I/O性能
    tcp_nodelay on;
    client_body_buffer_size 512k;

    #设置nginx开启keepalive，超时时间为3600秒，也就是说：如果客户端3600秒内没有后续的请求过来，nginx就会断掉这个TCP连接，设置为0表示禁用keepalive。
    keepalive_timeout 3600;
    #设置长连接能够处理请求的次数，500表示：一个长连接nginx最多处理500次请求就会关闭。
    keepalive_requests 1000;

    proxy_connect_timeout 60;
    proxy_read_timeout 60;
    proxy_send_timeout 60;
    proxy_buffer_size 32k;
    proxy_buffers 4 64k;
    proxy_busy_buffers_size 128k;
    # 缓存文件夹大小
    proxy_temp_file_write_size 300m;
    # 缓存目录
    proxy_temp_path /home/nginx/tmp/proxy_temp_dir;
    proxy_cache_path /home/nginx/tmp/proxy_cache_dir levels=1:2 keys_zone=cache_one:50m inactive=7d max_size=2g;

    gzip  on;
    # 指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库
    #gzip_disable "msie6";
    gzip_proxied any;
    # 最小压缩文件大小(当返回内容大于此值时才会使用gzip进行压缩,以K为单位)
    gzip_min_length 1000;
    # 压缩比率1--9
    gzip_comp_level 2;
    # 压缩缓冲区(以16k为单位,按照原始数据大小以512k为单位的4倍申请内存)
    gzip_buffers 4 512k;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    # 前端服务缓存压缩
    gzip_vary on;
    #输出缓冲区
    output_buffers 4 512k;
    #输出缓冲区
    postpone_output 5460;


    log_format  main '$remote_addr - $remote_user $time_iso8601 "$request" '
                       '$status $body_bytes_sent "$http_referer" '
               '"$http_user_agent" $request_time $upstream_response_time';

   #2020-04-29 日志追踪 start
   log_format  trace_main '$remote_addr $remote_user $time_iso8601 $request '
                           '$status $body_bytes_sent $http_referer '
                           '$http_user_agent $http_x_forwarded_for 请求处理时长：$request_time   |'
                           '跟后端server建立连接的时间: $upstream_connect_time  $upstream_addr $upstream_status '
                           '$upstream_response_length  请求过程中,upstream响应时间：$upstream_response_time';
   #2020-04-29 日志追踪 end

    upstream ottertune  {
        server 223.254.60.12:8000 weight=1 max_fails=0 fail_timeout=10s;

        #这个值必须设置，默认为0. 设置每个worker可以保持长连接空闲时的最大连接数。
        #keepalive 1000;
    }

    server {
        listen       80;        #监听端口
        #server_name  223.254.60.12;

        # Nginx不是立即转发收到的请求，而是等buffer满之后再转发，默认是On。
        proxy_buffering off;

        # 监控计数
        location /status {
             stub_status;
         }

        #默认请求设置
        location / {
            proxy_pass http://ottertune;
            proxy_set_header Host   $host;
            proxy_set_header X-Real-IP      $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 缓冲区设置小了，Nginx会把内容写到硬盘，这样会影响性能。
            client_body_buffer_size 1024k;
            client_max_body_size 2040m;

            proxy_ignore_client_abort  on;  #让代理服务端不要主动关闭客户端的连接。
      }

        location /static {
            root /home/zhc/ottertune/server/website/website/;
        }

        #所有的静态文件直接读取不经过tomcat,nginx自己处理
        location ~ .*\.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ {
            expires  30d;
        }

        location ~ .*\.(js|css)?$ {
            expires  1h;
        }

        #定义错误提示页面
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /home/zhc/nginx/html;
        }
    }
}
